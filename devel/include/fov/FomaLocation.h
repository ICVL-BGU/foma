// Generated by gencpp from file fov/FomaLocation.msg
// DO NOT EDIT!


#ifndef FOV_MESSAGE_FOMALOCATION_H
#define FOV_MESSAGE_FOMALOCATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace fov
{
template <class ContainerAllocator>
struct FomaLocation_
{
  typedef FomaLocation_<ContainerAllocator> Type;

  FomaLocation_()
    : image()
    , world()  {
    }
  FomaLocation_(const ContainerAllocator& _alloc)
    : image(_alloc)
    , world(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _image_type;
  _image_type image;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _world_type;
  _world_type world;





  typedef boost::shared_ptr< ::fov::FomaLocation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fov::FomaLocation_<ContainerAllocator> const> ConstPtr;

}; // struct FomaLocation_

typedef ::fov::FomaLocation_<std::allocator<void> > FomaLocation;

typedef boost::shared_ptr< ::fov::FomaLocation > FomaLocationPtr;
typedef boost::shared_ptr< ::fov::FomaLocation const> FomaLocationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fov::FomaLocation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fov::FomaLocation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fov::FomaLocation_<ContainerAllocator1> & lhs, const ::fov::FomaLocation_<ContainerAllocator2> & rhs)
{
  return lhs.image == rhs.image &&
    lhs.world == rhs.world;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fov::FomaLocation_<ContainerAllocator1> & lhs, const ::fov::FomaLocation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fov

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fov::FomaLocation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fov::FomaLocation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fov::FomaLocation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fov::FomaLocation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fov::FomaLocation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fov::FomaLocation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fov::FomaLocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b07c96efdecb7282bf61c35bd56a0d2";
  }

  static const char* value(const ::fov::FomaLocation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b07c96efdecb728ULL;
  static const uint64_t static_value2 = 0x2bf61c35bd56a0d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::fov::FomaLocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fov/FomaLocation";
  }

  static const char* value(const ::fov::FomaLocation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fov::FomaLocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point image\n"
"geometry_msgs/Point world\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::fov::FomaLocation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fov::FomaLocation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.image);
      stream.next(m.world);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FomaLocation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fov::FomaLocation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fov::FomaLocation_<ContainerAllocator>& v)
  {
    s << indent << "image: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
    s << indent << "world: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.world);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOV_MESSAGE_FOMALOCATION_H
